#!/usr/bin/env ruby
require 'gli'
require 'block'

include GLI::App

$redis = Redis.new

program_desc 'Ruby Gem to block IP addresses that are requesting URLs you determine are bad.'

version Block::VERSION

desc 'The searches - separated by commas.'
arg_name 'passwd,acunetrix'
flag [:s,:search]

desc 'The filename to watch'
arg_name 'filename.txt'
flag [:f,:file]

desc 'Redis server location'
arg_name '127.0.0.1:6379'
default_value '127.0.0.1:6379'
flag [:r,:redis]

desc 'Expiry time in seconds'
arg_name '10'
default_value 10
flag [:e,:expiry]

desc 'Block threshold number'
arg_name '30'
default_value 30
flag [:t,:threshold]

desc 'Disable adding firewall rules'
switch [:d,:disable]

pre do |global,command,options,args|
  # Make sure there's a file.
  file = check_for_file(global)

  # Make sure we have searches
  searches = check_for_searches(global)
  
  # Make sure redis is available.
  redis = check_for_redis
end

desc 'Block bad IP addresses'
command :block do |c|
  c.action do |global,options,args|
    puts "Starting to tail: #{global[:file]}"
    $search = global[:search].split(',')
    $options = global
    EventMachine.run do
      EventMachine::file_tail(global[:file], Reader)
    end
  end
end

post do |global,command,options,args|
  puts "Post logic here."
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
